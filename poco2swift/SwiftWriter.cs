using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using poco2swift.SwiftTypes;

namespace poco2swift
{
	class SwiftWriter : IDisposable
	{
		public SwiftWriter(string outputDir, Poco2SwiftType configuration)
		{
			if (String.IsNullOrEmpty(outputDir))
				throw new ArgumentNullException("outputDir");

			if (configuration == null)
				throw new ArgumentNullException("configuration");

			_outputDir = outputDir;
			_configuration = configuration;
		}

		public void Write(SwiftType swiftType, Type type)
		{
			if (swiftType == null)
				throw new ArgumentNullException("swiftType");

			if (type == null)
				throw new ArgumentNullException("type");

			var composite = swiftType as SwiftComposite;

			if (composite == null)
			{
				ErrorHandler.Error("Attempting to write non-composite Swift type '{0}' for .NET type {1}", swiftType.Declaration, type.FullName);
				return;
			}

			var writer = GetWriter(type);

			writer.WriteLine();

			composite.WriteDeclaration(writer);
		}

		private TextWriter GetWriter(Type type)
		{
			var assembly = type.Assembly;
			TextWriter writer;

			if (!_writers.TryGetValue(assembly, out writer))
			{
				var assemblyPath = assembly.Location;
				var assemblyName = Path.GetFileName(assemblyPath);
				var swiftName = Path.ChangeExtension(assemblyName, ".swift");
				var swiftPath = Path.Combine(_outputDir, swiftName);

				//writer = new StreamWriter(swiftPath, false, Encoding.UTF8);
				writer = File.CreateText(swiftPath);

				_writers.Add(assembly, writer);

				WriteFilePreamble(writer);
			}

			return writer;
		}

		private void WriteFilePreamble(TextWriter writer)
		{
			writer.WriteLine("// Generated by poco2swift");

			if (_configuration.imports != null)
			{
				bool firstTime = true;
				
				foreach (var module in _configuration.imports)
				{
					if (String.IsNullOrEmpty(module.name))
						continue;

					if (firstTime)
						writer.WriteLine();

					writer.WriteLine("import {0}", module.name);

					firstTime = false;
				}

				if (!firstTime)
					writer.WriteLine();
			}
		}

		#region IDisposable implementation

		public void Dispose()
		{
			Dispose(true);
			GC.SuppressFinalize(this);
		}

		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				if (_writers != null)
				{
					foreach (var writer in _writers.Values)
						writer.Dispose();

					_writers = null;
				}

				_disposed = true;
			}
		}

		protected void CheckDisposed()
		{
			if (_disposed)
				throw new ObjectDisposedException("InMemoryBlobContext");
		}

		#endregion

		private readonly string _outputDir;
		private readonly Poco2SwiftType _configuration;
		private bool _disposed;
		private IDictionary<Assembly, TextWriter> _writers = new Dictionary<Assembly, TextWriter>();
	}
}
